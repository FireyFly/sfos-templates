
# https://github.com/sailfishos/gecko-dev/blob/master/rpm/xulrunner-qt5.spec#L263-L271
# (adapted) unfortunately couldn't figure out a simpler way to define this
%rust_sb2_target() %{lua:
    arch = rpm.expand('%{_arch}')
    if string.find(rpm.expand('%arm32'), arch) then
        print('armv7-unknown-linux-gnueabihf')
    elseif string.find(rpm.expand('%arm64'), arch) then
        print('aarch64-unknown-linux-gnu')
    elseif string.find(rpm.expand('%ix86'), arch) then
        print('i686-unknown-linux-gnu')
    else
        -- if we error here it messes with some 'mb2 build'
        -- post-processing/pruning done outside sb2
        print('RUST-SB2-TARGET-UNSUPPORTED-ARCH')
    end
}

# SB2_RUST_*: avoids a malloc hang in sb2, apparently
#   (see https://github.com/sailfishos/gecko-dev/blob/master/rpm/xulrunner-qt5.spec#L300-L305)
# QMAKE: avoids qmetaobject-rs's build.rs getting stuck at not finding `qmake6` for some reason
#   (see https://github.com/woboq/qmetaobject-rs/blob/master/qttypes/build.rs#L41-L63)
%rust_env() \
    export SB2_RUST_TARGET_TRIPLE=%{rust_sb2_target} \
    export SB2_RUST_EXECVP_SHIM="/usr/bin/env LD_PRELOAD=/usr/lib/libsb2/libsb2.so.1 /usr/bin/env" \
    export SB2_RUST_USE_REAL_EXECVP=Yes \
    export SB2_RUST_USE_REAL_FN=Yes \
%ifnarch %ix86 \
    export HOST_CC=host-cc \
    export HOST_CXX=host-cxx \
    export CC_i686_unknown_linux_gnu=$HOST_CC \
    export CXX_i686_unknown_linux_gnu=$HOST_CXX \
%endif \
    export PATH=/opt/cross/bin/:$PATH \
    export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=armv7hl-meego-linux-gnueabi-gcc \
    export CC_armv7_unknown_linux_gnueabihf=armv7hl-meego-linux-gnueabi-gcc \
    export CXX_armv7_unknown_linux_gnueabihf=armv7hl-meego-linux-gnueabi-g++ \
    export AR_armv7_unknown_linux_gnueabihf=armv7hl-meego-linux-gnueabi-ar \
    export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-meego-linux-gnu-gcc \
    export CC_aarch64_unknown_linux_gnu=aarch64-meego-linux-gnu-gcc \
    export CXX_aarch64_unknown_linux_gnu=aarch64-meego-linux-gnu-g++ \
    export AR_aarch64_unknown_linux_gnu=aarch64-meego-linux-gnu-ar \
    export QMAKE=qmake

%rust_build() \
    cargo build -j 1 --verbose --release --manifest-path %{_sourcedir}/../Cargo.toml

%rust_install() \
    install -D %{_sourcedir}/../target/%{rust_sb2_target}/release/%{name} %{buildroot}%{_bindir}/%{name}

# vim: set ft=spec:
